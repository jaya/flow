
00:34:30.621 [info]  Already up
..................................................%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    technology: %Flow.Jobs.Technology{
      __meta__: #Ecto.Schema.Metadata<:loaded, "technologies">,
      description: "some description",
      id: "98bb7f0f-7c25-4ce6-a827-71fbdc50fa79",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      updated_at: ~N[2020-04-12 03:34:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "f775e13d-9e3c-4204-af86-ae4f9e078469",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgY3JlYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACRmNzc1ZTEzZC05ZTNjLTQyMDQtYWY4Ni1hZTRmOWUwNzg0Njk.uCHFc2iBZCB29inKh2fsEpTpxV7Fw_LhujFovGSfnaw"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.577.0>,
  params: %{"id" => "98bb7f0f-7c25-4ce6-a827-71fbdc50fa79"},
  path_info: ["technologies", "98bb7f0f-7c25-4ce6-a827-71fbdc50fa79"],
  path_params: %{"id" => "98bb7f0f-7c25-4ce6-a827-71fbdc50fa79"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Technology created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Technology created successfully."},
      "user_id" => "f775e13d-9e3c-4204-af86-ae4f9e078469"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgY3JlYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACRmNzc1ZTEzZC05ZTNjLTQyMDQtYWY4Ni1hZTRmOWUwNzg0Njk.uCHFc2iBZCB29inKh2fsEpTpxV7Fw_LhujFovGSfnaw"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgY3JlYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACRmNzc1ZTEzZC05ZTNjLTQyMDQtYWY4Ni1hZTRmOWUwNzg0Njk.uCHFc2iBZCB29inKh2fsEpTpxV7Fw_LhujFovGSfnaw"}
  ],
  request_path: "/technologies/98bb7f0f-7c25-4ce6-a827-71fbdc50fa79",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKFsaFhQUIgAAANC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Technology<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "8c8619c5-bc65-4ffa-abd8-bde96de676d7",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{"technology" => %{"description" => nil, "name" => nil}},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.579.0>,
  params: %{"technology" => %{"description" => nil, "name" => nil}},
  path_info: ["technologies"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "8c8619c5-bc65-4ffa-abd8-bde96de676d7"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/technologies",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKMtrBAtnpMAAAbB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Technology<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "fb1bc598-bd76-44db-9f80-fb3bba3edd0d",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.581.0>,
  params: %{},
  path_info: ["technologies", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "fb1bc598-bd76-44db-9f80-fb3bba3edd0d"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/technologies/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKStJAh3344AAANi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Technology<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    technology: %Flow.Jobs.Technology{
      __meta__: #Ecto.Schema.Metadata<:loaded, "technologies">,
      description: "some description",
      id: "a8e97547-2274-4831-a793-a3e2a1fbb3a0",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      updated_at: ~N[2020-04-12 03:34:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "a27b938d-0262-4a95-8d67-e3aa8dc49182",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{"technology" => %{"description" => nil, "name" => nil}},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.583.0>,
  params: %{
    "id" => "a8e97547-2274-4831-a793-a3e2a1fbb3a0",
    "technology" => %{"description" => nil, "name" => nil}
  },
  path_info: ["technologies", "a8e97547-2274-4831-a793-a3e2a1fbb3a0"],
  path_params: %{"id" => "a8e97547-2274-4831-a793-a3e2a1fbb3a0"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "a27b938d-0262-4a95-8d67-e3aa8dc49182"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/technologies/a8e97547-2274-4831-a793-a3e2a1fbb3a0",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKVPQ_A0L-cAAAbh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Technology<>, valid?: true>,
    layout: {FlowWeb.LayoutView, "app.html"},
    technology: %Flow.Jobs.Technology{
      __meta__: #Ecto.Schema.Metadata<:loaded, "technologies">,
      description: "some description",
      id: "4412ef34-3d0f-49e7-abb6-d633d54ea858",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      updated_at: ~N[2020-04-12 03:34:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "44ac7876-dbee-404e-8c0c-fe1035bf5ed1",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.585.0>,
  params: %{"id" => "4412ef34-3d0f-49e7-abb6-d633d54ea858"},
  path_info: ["technologies", "4412ef34-3d0f-49e7-abb6-d633d54ea858", "edit"],
  path_params: %{"id" => "4412ef34-3d0f-49e7-abb6-d633d54ea858"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "44ac7876-dbee-404e-8c0c-fe1035bf5ed1"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/technologies/4412ef34-3d0f-49e7-abb6-d633d54ea858/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKYFEuhuSzgAAAcB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    technology: %Flow.Jobs.Technology{
      __meta__: #Ecto.Schema.Metadata<:loaded, "technologies">,
      description: "some updated description",
      id: "bb6f18ce-3851-4726-b7b8-b4150694d73a",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some updated name",
      updated_at: ~N[2020-04-12 03:34:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "1a91ec39-bf96-4155-b3d1-0ff85dae3638",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgdXBkYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQxYTkxZWMzOS1iZjk2LTQxNTUtYjNkMS0wZmY4NWRhZTM2Mzg._ZpVps5A3S1IvqLgiNc2ir5_CK4G7IV1WddPygF5RWs"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.587.0>,
  params: %{"id" => "bb6f18ce-3851-4726-b7b8-b4150694d73a"},
  path_info: ["technologies", "bb6f18ce-3851-4726-b7b8-b4150694d73a"],
  path_params: %{"id" => "bb6f18ce-3851-4726-b7b8-b4150694d73a"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Technology updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Technology updated successfully."},
      "user_id" => "1a91ec39-bf96-4155-b3d1-0ff85dae3638"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgdXBkYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQxYTkxZWMzOS1iZjk2LTQxNTUtYjNkMS0wZmY4NWRhZTM2Mzg._ZpVps5A3S1IvqLgiNc2ir5_CK4G7IV1WddPygF5RWs"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgdXBkYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQxYTkxZWMzOS1iZjk2LTQxNTUtYjNkMS0wZmY4NWRhZTM2Mzg._ZpVps5A3S1IvqLgiNc2ir5_CK4G7IV1WddPygF5RWs"}
  ],
  request_path: "/technologies/bb6f18ce-3851-4726-b7b8-b4150694d73a",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKdqdxgPbroAAAdB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    technologies: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "3981b88c-2de1-4995-b584-6f401516515e",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.589.0>,
  params: %{},
  path_info: ["technologies"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "3981b88c-2de1-4995-b584-6f401516515e"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/technologies",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKfWwcBrw7kAAAOC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
..%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    status: %Flow.Jobs.Status{
      __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
      candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
      description: "some description",
      enable: true,
      id: "7cdeaf7f-9a94-4e3d-b105-1fdac666d5c9",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      order: 42,
      updated_at: ~N[2020-04-12 03:34:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "10f76374-84f0-47dc-9816-cd568663f6c9",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDEwZjc2Mzc0LTg0ZjAtNDdkYy05ODE2LWNkNTY4NjYzZjZjOQ.tiuOLQ2yN_HettPYQa5dIX4xdVkEQgyJyDyDztMRT80"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.596.0>,
  params: %{"id" => "7cdeaf7f-9a94-4e3d-b105-1fdac666d5c9"},
  path_info: ["status", "7cdeaf7f-9a94-4e3d-b105-1fdac666d5c9"],
  path_params: %{"id" => "7cdeaf7f-9a94-4e3d-b105-1fdac666d5c9"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Status created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Status created successfully."},
      "user_id" => "10f76374-84f0-47dc-9816-cd568663f6c9"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDEwZjc2Mzc0LTg0ZjAtNDdkYy05ODE2LWNkNTY4NjYzZjZjOQ.tiuOLQ2yN_HettPYQa5dIX4xdVkEQgyJyDyDztMRT80"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDEwZjc2Mzc0LTg0ZjAtNDdkYy05ODE2LWNkNTY4NjYzZjZjOQ.tiuOLQ2yN_HettPYQa5dIX4xdVkEQgyJyDyDztMRT80"}
  ],
  request_path: "/status/7cdeaf7f-9a94-4e3d-b105-1fdac666d5c9",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKmYzLBu3m0AAAfB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        order: {"can't be blank", [validation: :required]},
        enable: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Status<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "dfec2241-02cf-4421-a2ae-a2bf2ec4922c",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "status" => %{
      "description" => nil,
      "enable" => nil,
      "name" => nil,
      "order" => nil
    }
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.598.0>,
  params: %{
    "status" => %{
      "description" => nil,
      "enable" => nil,
      "name" => nil,
      "order" => nil
    }
  },
  path_info: ["status"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "dfec2241-02cf-4421-a2ae-a2bf2ec4922c"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/status",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKo8NLg6h-QAAAfh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        order: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Status<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "59e6bd4d-5cf9-4a4e-8ae7-b2e582f45066",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.600.0>,
  params: %{},
  path_info: ["status", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "59e6bd4d-5cf9-4a4e-8ae7-b2e582f45066"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/status/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKqPfQiMYnUAAAOi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        order: {"can't be blank", [validation: :required]},
        enable: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Status<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    status: %Flow.Jobs.Status{
      __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
      candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
      description: "some description",
      enable: true,
      id: "788ce45b-2c9e-48e0-87f8-87f83ca59789",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      order: 42,
      updated_at: ~N[2020-04-12 03:34:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "9811525d-6950-4fa5-8562-1e954f6d0051",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "status" => %{
      "description" => nil,
      "enable" => nil,
      "name" => nil,
      "order" => nil
    }
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.602.0>,
  params: %{
    "id" => "788ce45b-2c9e-48e0-87f8-87f83ca59789",
    "status" => %{
      "description" => nil,
      "enable" => nil,
      "name" => nil,
      "order" => nil
    }
  },
  path_info: ["status", "788ce45b-2c9e-48e0-87f8-87f83ca59789"],
  path_params: %{"id" => "788ce45b-2c9e-48e0-87f8-87f83ca59789"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "9811525d-6950-4fa5-8562-1e954f6d0051"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/status/788ce45b-2c9e-48e0-87f8-87f83ca59789",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKr9J0AxBVkAAAgB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Status<>, valid?: true>,
    layout: {FlowWeb.LayoutView, "app.html"},
    status: %Flow.Jobs.Status{
      __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
      candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
      description: "some description",
      enable: true,
      id: "42501e01-ffc8-46ae-b009-e3ebaa1e6c55",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      order: 42,
      updated_at: ~N[2020-04-12 03:34:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "eb92b177-3537-47c1-9c3f-1ad23653319b",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.604.0>,
  params: %{"id" => "42501e01-ffc8-46ae-b009-e3ebaa1e6c55"},
  path_info: ["status", "42501e01-ffc8-46ae-b009-e3ebaa1e6c55", "edit"],
  path_params: %{"id" => "42501e01-ffc8-46ae-b009-e3ebaa1e6c55"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "eb92b177-3537-47c1-9c3f-1ad23653319b"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/status/42501e01-ffc8-46ae-b009-e3ebaa1e6c55/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKulu4DXuEkAAAPC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    status: %Flow.Jobs.Status{
      __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
      candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
      description: "some updated description",
      enable: false,
      id: "d2b74f63-5d01-4942-b264-ff49fb3242df",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some updated name",
      order: 43,
      updated_at: ~N[2020-04-12 03:34:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "72d87725-3ead-4736-9996-0ed945f58db4",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDcyZDg3NzI1LTNlYWQtNDczNi05OTk2LTBlZDk0NWY1OGRiNA.K6p-fgot-nHkHnSLQNz1jA7Gvy3BLe-aO7Y_Wv3WvGc"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.606.0>,
  params: %{"id" => "d2b74f63-5d01-4942-b264-ff49fb3242df"},
  path_info: ["status", "d2b74f63-5d01-4942-b264-ff49fb3242df"],
  path_params: %{"id" => "d2b74f63-5d01-4942-b264-ff49fb3242df"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Status updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Status updated successfully."},
      "user_id" => "72d87725-3ead-4736-9996-0ed945f58db4"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDcyZDg3NzI1LTNlYWQtNDczNi05OTk2LTBlZDk0NWY1OGRiNA.K6p-fgot-nHkHnSLQNz1jA7Gvy3BLe-aO7Y_Wv3WvGc"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDcyZDg3NzI1LTNlYWQtNDczNi05OTk2LTBlZDk0NWY1OGRiNA.K6p-fgot-nHkHnSLQNz1jA7Gvy3BLe-aO7Y_Wv3WvGc"}
  ],
  request_path: "/status/d2b74f63-5d01-4942-b264-ff49fb3242df",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HKyfp_haSXIAAAhB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "3b6f0923-6511-4765-be2e-8971054cadbc",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.608.0>,
  params: %{},
  path_info: ["status"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "3b6f0923-6511-4765-be2e-8971054cadbc"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/status",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HK0IZHjbZb0AAAPi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
..%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    job: %Flow.Jobs.Job{
      __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
      cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
      client: %Flow.Jobs.Client{
        __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
        description: "some description",
        id: "d04b52ce-0662-4af0-98f5-7b40c385f44d",
        inserted_at: ~N[2020-04-12 03:34:32],
        jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
        logo: "some logo",
        name: "some name",
        updated_at: ~N[2020-04-12 03:34:32]
      },
      client_id: "d04b52ce-0662-4af0-98f5-7b40c385f44d",
      description: "some description",
      id: "cc55de53-66f9-4eb7-a183-96d90194b8cb",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      positions: 42,
      updated_at: ~N[2020-04-12 03:34:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "02c85999-0e68-4301-8046-d118bfb978bd",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDAyYzg1OTk5LTBlNjgtNDMwMS04MDQ2LWQxMThiZmI5NzhiZA.Og40UewGJWqJnMB9GWFYWx-1L6WbWO8qrb_6yWi9p6o"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.614.0>,
  params: %{"id" => "cc55de53-66f9-4eb7-a183-96d90194b8cb"},
  path_info: ["jobs", "cc55de53-66f9-4eb7-a183-96d90194b8cb"],
  path_params: %{"id" => "cc55de53-66f9-4eb7-a183-96d90194b8cb"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Job created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Job created successfully."},
      "user_id" => "02c85999-0e68-4301-8046-d118bfb978bd"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDAyYzg1OTk5LTBlNjgtNDMwMS04MDQ2LWQxMThiZmI5NzhiZA.Og40UewGJWqJnMB9GWFYWx-1L6WbWO8qrb_6yWi9p6o"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDAyYzg1OTk5LTBlNjgtNDMwMS04MDQ2LWQxMThiZmI5NzhiZA.Og40UewGJWqJnMB9GWFYWx-1L6WbWO8qrb_6yWi9p6o"}
  ],
  request_path: "/jobs/cc55de53-66f9-4eb7-a183-96d90194b8cb",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HK8LLaASPmoAAAQi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        positions: {"can't be blank", [validation: :required]},
        client_id: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Job<>,
      valid?: false
    >,
    clients: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "5736e83c-c81f-4c1b-96c6-e56ddb138a47",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "job" => %{"description" => nil, "name" => nil, "positions" => nil}
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.616.0>,
  params: %{"job" => %{"description" => nil, "name" => nil, "positions" => nil}},
  path_info: ["jobs"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "5736e83c-c81f-4c1b-96c6-e56ddb138a47"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/jobs",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HK-pMsCK9E8AAAih"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        positions: {"can't be blank", [validation: :required]},
        client_id: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Job<>,
      valid?: false
    >,
    clients: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "cb663f6f-3f40-422d-9f58-1a3ce4411e6e",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.618.0>,
  params: %{},
  path_info: ["jobs", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "cb663f6f-3f40-422d-9f58-1a3ce4411e6e"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/jobs/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HLAdPcjckTMAAAjB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        positions: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Job<>,
      valid?: false
    >,
    clients: [{"some name", "db355142-3aec-4319-81aa-30d53ba3da46"}],
    job: %Flow.Jobs.Job{
      __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
      cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
      client: %Flow.Jobs.Client{
        __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
        description: "some description",
        id: "db355142-3aec-4319-81aa-30d53ba3da46",
        inserted_at: ~N[2020-04-12 03:34:32],
        jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
        logo: "some logo",
        name: "some name",
        updated_at: ~N[2020-04-12 03:34:32]
      },
      client_id: "db355142-3aec-4319-81aa-30d53ba3da46",
      description: "some description",
      id: "a9baa071-8658-40dd-b28a-07c5f14987dc",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      positions: 42,
      updated_at: ~N[2020-04-12 03:34:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "bd51aed2-a1a1-464f-bbcc-6a2db8b8a43b",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "job" => %{"description" => nil, "name" => nil, "positions" => nil}
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.620.0>,
  params: %{
    "id" => "a9baa071-8658-40dd-b28a-07c5f14987dc",
    "job" => %{"description" => nil, "name" => nil, "positions" => nil}
  },
  path_info: ["jobs", "a9baa071-8658-40dd-b28a-07c5f14987dc"],
  path_params: %{"id" => "a9baa071-8658-40dd-b28a-07c5f14987dc"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "bd51aed2-a1a1-464f-bbcc-6a2db8b8a43b"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/jobs/a9baa071-8658-40dd-b28a-07c5f14987dc",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HLC8-Gh0rPYAAAjh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Job<>, valid?: true>,
    clients: [{"some name", "8156dee9-c748-4993-b572-4663c6de2764"}],
    job: %Flow.Jobs.Job{
      __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
      cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
      client: %Flow.Jobs.Client{
        __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
        description: "some description",
        id: "8156dee9-c748-4993-b572-4663c6de2764",
        inserted_at: ~N[2020-04-12 03:34:32],
        jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
        logo: "some logo",
        name: "some name",
        updated_at: ~N[2020-04-12 03:34:32]
      },
      client_id: "8156dee9-c748-4993-b572-4663c6de2764",
      description: "some description",
      id: "6e9edf5e-f804-4aba-b04b-79399640c003",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      positions: 42,
      updated_at: ~N[2020-04-12 03:34:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "aed8d21d-57d7-478b-846e-2e3cc96c20ed",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.622.0>,
  params: %{"id" => "6e9edf5e-f804-4aba-b04b-79399640c003"},
  path_info: ["jobs", "6e9edf5e-f804-4aba-b04b-79399640c003", "edit"],
  path_params: %{"id" => "6e9edf5e-f804-4aba-b04b-79399640c003"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "aed8d21d-57d7-478b-846e-2e3cc96c20ed"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/jobs/6e9edf5e-f804-4aba-b04b-79399640c003/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HLHG1ugJv6MAAAkB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    job: %Flow.Jobs.Job{
      __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
      cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
      client: %Flow.Jobs.Client{
        __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
        description: "some description",
        id: "79ca742e-364a-4edc-8bba-0c92db51e60a",
        inserted_at: ~N[2020-04-12 03:34:32],
        jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
        logo: "some logo",
        name: "some name",
        updated_at: ~N[2020-04-12 03:34:32]
      },
      client_id: "79ca742e-364a-4edc-8bba-0c92db51e60a",
      description: "some updated description",
      id: "19bb67b0-d269-48d2-ac42-ced653e517ea",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some updated name",
      positions: 43,
      updated_at: ~N[2020-04-12 03:34:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "ba5577cd-1e9c-4fb5-bc86-efcd9cf6ca64",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGJhNTU3N2NkLTFlOWMtNGZiNS1iYzg2LWVmY2Q5Y2Y2Y2E2NA.8CW-GL5crJvy8-Qqra2b0XKQfgoalvE6pagrQXCyRas"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.624.0>,
  params: %{"id" => "19bb67b0-d269-48d2-ac42-ced653e517ea"},
  path_info: ["jobs", "19bb67b0-d269-48d2-ac42-ced653e517ea"],
  path_params: %{"id" => "19bb67b0-d269-48d2-ac42-ced653e517ea"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Job updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Job updated successfully."},
      "user_id" => "ba5577cd-1e9c-4fb5-bc86-efcd9cf6ca64"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGJhNTU3N2NkLTFlOWMtNGZiNS1iYzg2LWVmY2Q5Y2Y2Y2E2NA.8CW-GL5crJvy8-Qqra2b0XKQfgoalvE6pagrQXCyRas"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGJhNTU3N2NkLTFlOWMtNGZiNS1iYzg2LWVmY2Q5Y2Y2Y2E2NA.8CW-GL5crJvy8-Qqra2b0XKQfgoalvE6pagrQXCyRas"}
  ],
  request_path: "/jobs/19bb67b0-d269-48d2-ac42-ced653e517ea",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HLN8anAKUUMAAAlB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.[]
%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    jobs: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "5a01c4c1-9ae9-4734-b7fd-247e9a05b444",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.626.0>,
  params: %{},
  path_info: ["jobs"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "5a01c4c1-9ae9-4734-b7fd-247e9a05b444"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/jobs",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HLQAvXChAfsAAAlh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.................%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidate: %Flow.Jobs.Candidate{
      __meta__: #Ecto.Schema.Metadata<:loaded, "candidates">,
      comments: #Ecto.Association.NotLoaded<association :comments is not loaded>,
      email: "some email",
      github: "some github",
      id: "fded82ce-39cc-4617-b498-538a8dae3d86",
      inserted_at: ~N[2020-04-12 03:34:32],
      job: %Flow.Jobs.Job{
        __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
        cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
        client: %Flow.Jobs.Client{
          __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
          description: "some description",
          id: "f5700f7c-62f2-4af2-93df-39fc59043241",
          inserted_at: ~N[2020-04-12 03:34:32],
          jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
          logo: "some logo",
          name: "some name",
          updated_at: ~N[2020-04-12 03:34:32]
        },
        client_id: "f5700f7c-62f2-4af2-93df-39fc59043241",
        description: "some description",
        id: "db5da3e5-59a8-4f59-bba2-c3e28870300c",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        positions: 42,
        updated_at: ~N[2020-04-12 03:34:32]
      },
      job_id: "db5da3e5-59a8-4f59-bba2-c3e28870300c",
      linkedin: "some linkedin",
      name: "some name",
      phone: "some phone",
      status: %Flow.Jobs.Status{
        __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
        candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
        description: "some description",
        enable: true,
        id: "43ac0282-d42e-458b-a94a-cab273055ad3",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        order: 42,
        updated_at: ~N[2020-04-12 03:34:32]
      },
      status_id: "43ac0282-d42e-458b-a94a-cab273055ad3",
      updated_at: ~N[2020-04-12 03:34:32],
      user: %Flow.Account.User{
        __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
        admin: true,
        avatar: "some avatar",
        email: "some email",
        id: "e3a3d19b-2af5-49b6-b62b-be72db619ee6",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        token: "some token",
        updated_at: ~N[2020-04-12 03:34:32]
      },
      user_id: "e3a3d19b-2af5-49b6-b62b-be72db619ee6"
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    token: "BUIBABgnRSckBSIGVyQbFR1-JBQ9Jz11W8coQJ5xkgad6A6xRJEqlkI6",
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "e3a3d19b-2af5-49b6-b62b-be72db619ee6",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGUzYTNkMTliLTJhZjUtNDliNi1iNjJiLWJlNzJkYjYxOWVlNg.fhmxBn-lbGq595r7bEAZkPLEUrMmyerbOAbQuUYIBo0"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.667.0>,
  params: %{"id" => "fded82ce-39cc-4617-b498-538a8dae3d86"},
  path_info: ["candidates", "fded82ce-39cc-4617-b498-538a8dae3d86"],
  path_params: %{"id" => "fded82ce-39cc-4617-b498-538a8dae3d86"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Candidate created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Candidate created successfully."},
      "user_id" => "e3a3d19b-2af5-49b6-b62b-be72db619ee6"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGUzYTNkMTliLTJhZjUtNDliNi1iNjJiLWJlNzJkYjYxOWVlNg.fhmxBn-lbGq595r7bEAZkPLEUrMmyerbOAbQuUYIBo0"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGUzYTNkMTliLTJhZjUtNDliNi1iNjJiLWJlNzJkYjYxOWVlNg.fhmxBn-lbGq595r7bEAZkPLEUrMmyerbOAbQuUYIBo0"}
  ],
  request_path: "/candidates/fded82ce-39cc-4617-b498-538a8dae3d86",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HL-1w7j6w48AAApB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{user_id: "3ece54ec-cf21-4146-85cb-e7492ab06ebd"},
      errors: [
        name: {"can't be blank", [validation: :required]},
        email: {"can't be blank", [validation: :required]},
        status_id: {"can't be blank", [validation: :required]},
        job_id: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Candidate<>,
      valid?: false
    >,
    jobs: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "3ece54ec-cf21-4146-85cb-e7492ab06ebd",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "candidate" => %{
      "email" => nil,
      "github" => nil,
      "linkedin" => nil,
      "name" => nil,
      "phone" => nil
    }
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.672.0>,
  params: %{
    "candidate" => %{
      "email" => nil,
      "github" => nil,
      "linkedin" => nil,
      "name" => nil,
      "phone" => nil
    }
  },
  path_info: ["candidates"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "3ece54ec-cf21-4146-85cb-e7492ab06ebd"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/candidates",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMBqz2AYsOEAAAph"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        email: {"can't be blank", [validation: :required]},
        status_id: {"can't be blank", [validation: :required]},
        job_id: {"can't be blank", [validation: :required]},
        user_id: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Candidate<>,
      valid?: false
    >,
    jobs: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "ad25b53b-575b-4334-9ad1-39c30af5d0c3",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.674.0>,
  params: %{},
  path_info: ["candidates", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "ad25b53b-575b-4334-9ad1-39c30af5d0c3"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/candidates/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMEB5xC8M_sAAAqB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidate: %Flow.Jobs.Candidate{
      __meta__: #Ecto.Schema.Metadata<:loaded, "candidates">,
      comments: #Ecto.Association.NotLoaded<association :comments is not loaded>,
      email: "some email",
      github: "some github",
      id: "aebe26ab-f9a4-491f-887a-2453dde5b00e",
      inserted_at: ~N[2020-04-12 03:34:32],
      job: %Flow.Jobs.Job{
        __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
        cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
        client: %Flow.Jobs.Client{
          __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
          description: "some description",
          id: "e6667530-edd7-4a72-9de3-ab5bba08c8bc",
          inserted_at: ~N[2020-04-12 03:34:32],
          jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
          logo: "some logo",
          name: "some name",
          updated_at: ~N[2020-04-12 03:34:32]
        },
        client_id: "e6667530-edd7-4a72-9de3-ab5bba08c8bc",
        description: "some description",
        id: "fa75f8aa-32f5-483d-bf10-a0d228e9cd03",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        positions: 42,
        updated_at: ~N[2020-04-12 03:34:32]
      },
      job_id: "fa75f8aa-32f5-483d-bf10-a0d228e9cd03",
      linkedin: "some linkedin",
      name: "some name",
      phone: "some phone",
      status: %Flow.Jobs.Status{
        __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
        candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
        description: "some description",
        enable: true,
        id: "16c72511-9d9a-48cd-8cd2-e700440372be",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        order: 42,
        updated_at: ~N[2020-04-12 03:34:32]
      },
      status_id: "16c72511-9d9a-48cd-8cd2-e700440372be",
      updated_at: ~N[2020-04-12 03:34:32],
      user: %Flow.Account.User{
        __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
        admin: true,
        avatar: "some avatar",
        email: "user some email",
        id: "21616607-48bf-4cee-b19a-8e3553c37647",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        token: "some token",
        updated_at: ~N[2020-04-12 03:34:32]
      },
      user_id: "21616607-48bf-4cee-b19a-8e3553c37647"
    },
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{
        github: nil,
        linkedin: nil,
        phone: nil,
        user_id: "b03ac08b-0d48-4e80-9c35-d378750b7173"
      },
      errors: [
        name: {"can't be blank", [validation: :required]},
        email: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Candidate<>,
      valid?: false
    >,
    jobs: [{"some name", "fa75f8aa-32f5-483d-bf10-a0d228e9cd03"}],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [{"some name", "16c72511-9d9a-48cd-8cd2-e700440372be"}],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "b03ac08b-0d48-4e80-9c35-d378750b7173",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "candidate" => %{
      "email" => nil,
      "github" => nil,
      "linkedin" => nil,
      "name" => nil,
      "phone" => nil
    }
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.676.0>,
  params: %{
    "candidate" => %{
      "email" => nil,
      "github" => nil,
      "linkedin" => nil,
      "name" => nil,
      "phone" => nil
    },
    "id" => "aebe26ab-f9a4-491f-887a-2453dde5b00e"
  },
  path_info: ["candidates", "aebe26ab-f9a4-491f-887a-2453dde5b00e"],
  path_params: %{"id" => "aebe26ab-f9a4-491f-887a-2453dde5b00e"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "b03ac08b-0d48-4e80-9c35-d378750b7173"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/candidates/aebe26ab-f9a4-491f-887a-2453dde5b00e",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMIs3jgDZVAAAAqh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidate: %Flow.Jobs.Candidate{
      __meta__: #Ecto.Schema.Metadata<:loaded, "candidates">,
      comments: #Ecto.Association.NotLoaded<association :comments is not loaded>,
      email: "some email",
      github: "some github",
      id: "e60bb46e-cc69-4af6-a658-7290eb8850f8",
      inserted_at: ~N[2020-04-12 03:34:32],
      job: %Flow.Jobs.Job{
        __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
        cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
        client: %Flow.Jobs.Client{
          __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
          description: "some description",
          id: "8eb926d4-4cd2-42bc-bdeb-ad108777a91c",
          inserted_at: ~N[2020-04-12 03:34:32],
          jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
          logo: "some logo",
          name: "some name",
          updated_at: ~N[2020-04-12 03:34:32]
        },
        client_id: "8eb926d4-4cd2-42bc-bdeb-ad108777a91c",
        description: "some description",
        id: "3ed8c2a5-cf34-4141-bfd9-64c71574f9f9",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        positions: 42,
        updated_at: ~N[2020-04-12 03:34:32]
      },
      job_id: "3ed8c2a5-cf34-4141-bfd9-64c71574f9f9",
      linkedin: "some linkedin",
      name: "some name",
      phone: "some phone",
      status: %Flow.Jobs.Status{
        __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
        candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
        description: "some description",
        enable: true,
        id: "df4c664e-d3d1-4e1e-a4d1-0bf221db355a",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        order: 42,
        updated_at: ~N[2020-04-12 03:34:32]
      },
      status_id: "df4c664e-d3d1-4e1e-a4d1-0bf221db355a",
      updated_at: ~N[2020-04-12 03:34:32],
      user: %Flow.Account.User{
        __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
        admin: true,
        avatar: "some avatar",
        email: "user some email",
        id: "e92b3e19-de74-4011-aede-bee4e6511c2c",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        token: "some token",
        updated_at: ~N[2020-04-12 03:34:32]
      },
      user_id: "e92b3e19-de74-4011-aede-bee4e6511c2c"
    },
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Candidate<>, valid?: true>,
    jobs: [{"some name", "3ed8c2a5-cf34-4141-bfd9-64c71574f9f9"}],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [{"some name", "df4c664e-d3d1-4e1e-a4d1-0bf221db355a"}],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "db61340f-d9d5-475c-9faa-250ea75a6081",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.681.0>,
  params: %{"id" => "e60bb46e-cc69-4af6-a658-7290eb8850f8"},
  path_info: ["candidates", "e60bb46e-cc69-4af6-a658-7290eb8850f8", "edit"],
  path_params: %{"id" => "e60bb46e-cc69-4af6-a658-7290eb8850f8"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "db61340f-d9d5-475c-9faa-250ea75a6081"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/candidates/e60bb46e-cc69-4af6-a658-7290eb8850f8/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMP2T7Dgb_gAAArB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidate: %Flow.Jobs.Candidate{
      __meta__: #Ecto.Schema.Metadata<:loaded, "candidates">,
      comments: #Ecto.Association.NotLoaded<association :comments is not loaded>,
      email: "some updated email",
      github: "some updated github",
      id: "7aeef059-d48e-4d1d-964f-41776293aeb3",
      inserted_at: ~N[2020-04-12 03:34:32],
      job: %Flow.Jobs.Job{
        __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
        cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
        client: %Flow.Jobs.Client{
          __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
          description: "some description",
          id: "a974650d-c67b-4900-9d28-ef4aee610510",
          inserted_at: ~N[2020-04-12 03:34:32],
          jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
          logo: "some logo",
          name: "some name",
          updated_at: ~N[2020-04-12 03:34:32]
        },
        client_id: "a974650d-c67b-4900-9d28-ef4aee610510",
        description: "some description",
        id: "5616e7f7-bad5-4684-8047-d01ed7702f4b",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        positions: 42,
        updated_at: ~N[2020-04-12 03:34:32]
      },
      job_id: "5616e7f7-bad5-4684-8047-d01ed7702f4b",
      linkedin: "some updated linkedin",
      name: "some updated name",
      phone: "some updated phone",
      status: %Flow.Jobs.Status{
        __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
        candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
        description: "some description",
        enable: true,
        id: "d77bffe2-b81f-4242-a1f9-d2f0ffe062f4",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        order: 42,
        updated_at: ~N[2020-04-12 03:34:32]
      },
      status_id: "d77bffe2-b81f-4242-a1f9-d2f0ffe062f4",
      updated_at: ~N[2020-04-12 03:34:32],
      user: %Flow.Account.User{
        __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
        admin: true,
        avatar: "some avatar",
        email: "some email",
        id: "5f0df564-2a4d-4716-9917-bf2daed3f3e1",
        inserted_at: ~N[2020-04-12 03:34:32],
        name: "some name",
        token: "some token",
        updated_at: ~N[2020-04-12 03:34:32]
      },
      user_id: "5f0df564-2a4d-4716-9917-bf2daed3f3e1"
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    token: "dlkdHXZ7HloSW0YcQQAzAgBuAQc-L2IHCmEMD9K9p8vQyXlCi_YihDPK",
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "5f0df564-2a4d-4716-9917-bf2daed3f3e1",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDVmMGRmNTY0LTJhNGQtNDcxNi05OTE3LWJmMmRhZWQzZjNlMQ.Cj5OCdgrOVsOjYVtlyQbds2tXVGsLRN_u6yU4ynn9vI"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.686.0>,
  params: %{"id" => "7aeef059-d48e-4d1d-964f-41776293aeb3"},
  path_info: ["candidates", "7aeef059-d48e-4d1d-964f-41776293aeb3"],
  path_params: %{"id" => "7aeef059-d48e-4d1d-964f-41776293aeb3"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Candidate updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Candidate updated successfully."},
      "user_id" => "5f0df564-2a4d-4716-9917-bf2daed3f3e1"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDVmMGRmNTY0LTJhNGQtNDcxNi05OTE3LWJmMmRhZWQzZjNlMQ.Cj5OCdgrOVsOjYVtlyQbds2tXVGsLRN_u6yU4ynn9vI"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDVmMGRmNTY0LTJhNGQtNDcxNi05OTE3LWJmMmRhZWQzZjNlMQ.Cj5OCdgrOVsOjYVtlyQbds2tXVGsLRN_u6yU4ynn9vI"}
  ],
  request_path: "/candidates/7aeef059-d48e-4d1d-964f-41776293aeb3",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMcME2Dqi60AAAsB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidates: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "2dbadfee-4acc-4ebe-86ba-92dd5836e600",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.694.0>,
  params: %{},
  path_info: [],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "2dbadfee-4acc-4ebe-86ba-92dd5836e600"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMfYAmhxNeEAAAsh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
..%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    client: %Flow.Jobs.Client{
      __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
      description: "some description",
      id: "d6e98803-5929-49c7-8d20-e27a4ace14f4",
      inserted_at: ~N[2020-04-12 03:34:32],
      jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
      logo: "some logo",
      name: "some name",
      updated_at: ~N[2020-04-12 03:34:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "92697397-d9bd-483e-8982-2aeb5db70ed2",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDkyNjk3Mzk3LWQ5YmQtNDgzZS04OTgyLTJhZWI1ZGI3MGVkMg.xMwmxa3m1_T6Y0SjstFrhTJWWc6k7U6haxtR1ltlAuc"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.700.0>,
  params: %{"id" => "d6e98803-5929-49c7-8d20-e27a4ace14f4"},
  path_info: ["clients", "d6e98803-5929-49c7-8d20-e27a4ace14f4"],
  path_params: %{"id" => "d6e98803-5929-49c7-8d20-e27a4ace14f4"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Client created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Client created successfully."},
      "user_id" => "92697397-d9bd-483e-8982-2aeb5db70ed2"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDkyNjk3Mzk3LWQ5YmQtNDgzZS04OTgyLTJhZWI1ZGI3MGVkMg.xMwmxa3m1_T6Y0SjstFrhTJWWc6k7U6haxtR1ltlAuc"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDkyNjk3Mzk3LWQ5YmQtNDgzZS04OTgyLTJhZWI1ZGI3MGVkMg.xMwmxa3m1_T6Y0SjstFrhTJWWc6k7U6haxtR1ltlAuc"}
  ],
  request_path: "/clients/d6e98803-5929-49c7-8d20-e27a4ace14f4",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMl_jDA5_poAAAuh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        logo: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Client<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "0d265f30-d0e3-42a5-8e1d-36b59b244e64",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "client" => %{"description" => nil, "logo" => nil, "name" => nil}
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.702.0>,
  params: %{"client" => %{"description" => nil, "logo" => nil, "name" => nil}},
  path_info: ["clients"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "0d265f30-d0e3-42a5-8e1d-36b59b244e64"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/clients",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMoB_rgbi7IAAAvB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        logo: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Client<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "fecbcd5d-5b15-431e-8015-221ef067c9aa",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.704.0>,
  params: %{},
  path_info: ["clients", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "fecbcd5d-5b15-431e-8015-221ef067c9aa"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/clients/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMpdA4DHY4cAAAvh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        logo: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Client<>,
      valid?: false
    >,
    client: %Flow.Jobs.Client{
      __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
      description: "some description",
      id: "eaf7faca-15a3-4080-93b4-610aadaacf5f",
      inserted_at: ~N[2020-04-12 03:34:32],
      jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
      logo: "some logo",
      name: "some name",
      updated_at: ~N[2020-04-12 03:34:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "c9612cf3-51c6-426f-9281-d343134fb9aa",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "client" => %{"description" => nil, "logo" => nil, "name" => nil}
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.706.0>,
  params: %{
    "client" => %{"description" => nil, "logo" => nil, "name" => nil},
    "id" => "eaf7faca-15a3-4080-93b4-610aadaacf5f"
  },
  path_info: ["clients", "eaf7faca-15a3-4080-93b4-610aadaacf5f"],
  path_params: %{"id" => "eaf7faca-15a3-4080-93b4-610aadaacf5f"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "c9612cf3-51c6-426f-9281-d343134fb9aa"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/clients/eaf7faca-15a3-4080-93b4-610aadaacf5f",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMrACxDS7GkAAAwB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Client<>, valid?: true>,
    client: %Flow.Jobs.Client{
      __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
      description: "some description",
      id: "305a9dae-d85a-494e-b2c4-03e68c876b2f",
      inserted_at: ~N[2020-04-12 03:34:32],
      jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
      logo: "some logo",
      name: "some name",
      updated_at: ~N[2020-04-12 03:34:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "507e51f9-8dde-4f2b-bf79-055e2085f1c2",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.708.0>,
  params: %{"id" => "305a9dae-d85a-494e-b2c4-03e68c876b2f"},
  path_info: ["clients", "305a9dae-d85a-494e-b2c4-03e68c876b2f", "edit"],
  path_params: %{"id" => "305a9dae-d85a-494e-b2c4-03e68c876b2f"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "507e51f9-8dde-4f2b-bf79-055e2085f1c2"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/clients/305a9dae-d85a-494e-b2c4-03e68c876b2f/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMtebfB43hoAAAwh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    client: %Flow.Jobs.Client{
      __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
      description: "some updated description",
      id: "6ffc9f12-a3e0-4a23-99e8-dfd50fd66933",
      inserted_at: ~N[2020-04-12 03:34:32],
      jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
      logo: "some updated logo",
      name: "some updated name",
      updated_at: ~N[2020-04-12 03:34:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "c8a4c719-2417-41d7-95c0-7fc5735c5a27",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGM4YTRjNzE5LTI0MTctNDFkNy05NWMwLTdmYzU3MzVjNWEyNw.I9Is4csU-qOt3dtcOEys-8EAUO41N1rSandMmB9rWSg"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.710.0>,
  params: %{"id" => "6ffc9f12-a3e0-4a23-99e8-dfd50fd66933"},
  path_info: ["clients", "6ffc9f12-a3e0-4a23-99e8-dfd50fd66933"],
  path_params: %{"id" => "6ffc9f12-a3e0-4a23-99e8-dfd50fd66933"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Client updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Client updated successfully."},
      "user_id" => "c8a4c719-2417-41d7-95c0-7fc5735c5a27"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGM4YTRjNzE5LTI0MTctNDFkNy05NWMwLTdmYzU3MzVjNWEyNw.I9Is4csU-qOt3dtcOEys-8EAUO41N1rSandMmB9rWSg"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGM4YTRjNzE5LTI0MTctNDFkNy05NWMwLTdmYzU3MzVjNWEyNw.I9Is4csU-qOt3dtcOEys-8EAUO41N1rSandMmB9rWSg"}
  ],
  request_path: "/clients/6ffc9f12-a3e0-4a23-99e8-dfd50fd66933",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMxvXQgmUE4AAAxh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    clients: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "38263098-8c78-4a4a-9c3e-0890cc0c7df7",
      inserted_at: ~N[2020-04-12 03:34:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-12 03:34:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.712.0>,
  params: %{},
  path_info: ["clients"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "38263098-8c78-4a4a-9c3e-0890cc0c7df7"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/clients",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgT1HMzZ1thHBzYAAAyB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.

Finished in 1.9 seconds
104 tests, 0 failures

Randomized with seed 771601
