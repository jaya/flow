
13:04:30.417 [info]  Already up
.................................................%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    technologies: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "60bd714c-3091-4c16-9891-b6116baf3533",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.567.0>,
  params: %{},
  path_info: ["technologies"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "60bd714c-3091-4c16-9891-b6116baf3533"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/technologies",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdW7yiOhTynwAAAQi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    technology: %Flow.Jobs.Technology{
      __meta__: #Ecto.Schema.Metadata<:loaded, "technologies">,
      description: "some updated description",
      id: "93716acb-82d0-4ba6-af6e-99db27cc58f5",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some updated name",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "27c3407d-e31c-4c36-b277-9bd177715ea8",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgdXBkYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQyN2MzNDA3ZC1lMzFjLTRjMzYtYjI3Ny05YmQxNzc3MTVlYTg.wKR-nU62ukgT_5E5dDSdq6jXmWalBMN5y99k2HddW9Y"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.569.0>,
  params: %{"id" => "93716acb-82d0-4ba6-af6e-99db27cc58f5"},
  path_info: ["technologies", "93716acb-82d0-4ba6-af6e-99db27cc58f5"],
  path_params: %{"id" => "93716acb-82d0-4ba6-af6e-99db27cc58f5"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Technology updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Technology updated successfully."},
      "user_id" => "27c3407d-e31c-4c36-b277-9bd177715ea8"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgdXBkYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQyN2MzNDA3ZC1lMzFjLTRjMzYtYjI3Ny05YmQxNzc3MTVlYTg.wKR-nU62ukgT_5E5dDSdq6jXmWalBMN5y99k2HddW9Y"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgdXBkYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQyN2MzNDA3ZC1lMzFjLTRjMzYtYjI3Ny05YmQxNzc3MTVlYTg.wKR-nU62ukgT_5E5dDSdq6jXmWalBMN5y99k2HddW9Y"}
  ],
  request_path: "/technologies/93716acb-82d0-4ba6-af6e-99db27cc58f5",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXNqYSAVjAEAAASC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Technology<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    technology: %Flow.Jobs.Technology{
      __meta__: #Ecto.Schema.Metadata<:loaded, "technologies">,
      description: "some description",
      id: "b9234b2a-f049-4a23-8869-087bd205fc6d",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "2d9614a3-2992-4e77-988f-d155d88e9ed5",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{"technology" => %{"description" => nil, "name" => nil}},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.571.0>,
  params: %{
    "id" => "b9234b2a-f049-4a23-8869-087bd205fc6d",
    "technology" => %{"description" => nil, "name" => nil}
  },
  path_info: ["technologies", "b9234b2a-f049-4a23-8869-087bd205fc6d"],
  path_params: %{"id" => "b9234b2a-f049-4a23-8869-087bd205fc6d"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "2d9614a3-2992-4e77-988f-d155d88e9ed5"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/technologies/b9234b2a-f049-4a23-8869-087bd205fc6d",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXQe-4CAbwAAAAYB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    technology: %Flow.Jobs.Technology{
      __meta__: #Ecto.Schema.Metadata<:loaded, "technologies">,
      description: "some description",
      id: "9497cfa5-3579-4399-a1d2-a168efa3d230",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "4c8682da-50fa-4e0a-9a5b-43dd4d7ad3dc",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgY3JlYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQ0Yzg2ODJkYS01MGZhLTRlMGEtOWE1Yi00M2RkNGQ3YWQzZGM.Z3tO08ChXcmR5DBlXe_NStjYwYEKzFur-exPcPRKzKk"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.573.0>,
  params: %{"id" => "9497cfa5-3579-4399-a1d2-a168efa3d230"},
  path_info: ["technologies", "9497cfa5-3579-4399-a1d2-a168efa3d230"],
  path_params: %{"id" => "9497cfa5-3579-4399-a1d2-a168efa3d230"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Technology created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Technology created successfully."},
      "user_id" => "4c8682da-50fa-4e0a-9a5b-43dd4d7ad3dc"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgY3JlYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQ0Yzg2ODJkYS01MGZhLTRlMGEtOWE1Yi00M2RkNGQ3YWQzZGM.Z3tO08ChXcmR5DBlXe_NStjYwYEKzFur-exPcPRKzKk"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAIFRlY2hub2xvZ3kgY3JlYXRlZCBzdWNjZXNzZnVsbHkubQAAAAd1c2VyX2lkbQAAACQ0Yzg2ODJkYS01MGZhLTRlMGEtOWE1Yi00M2RkNGQ3YWQzZGM.Z3tO08ChXcmR5DBlXe_NStjYwYEKzFur-exPcPRKzKk"}
  ],
  request_path: "/technologies/9497cfa5-3579-4399-a1d2-a168efa3d230",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXX4LDgPDiIAAATC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
..%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Technology<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "8e67a554-2cd1-4943-b432-3ed0ad976698",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{"technology" => %{"description" => nil, "name" => nil}},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.577.0>,
  params: %{"technology" => %{"description" => nil, "name" => nil}},
  path_info: ["technologies"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "8e67a554-2cd1-4943-b432-3ed0ad976698"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/technologies",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXgZ_rBQUIgAAAZh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Technology<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "7af60321-370e-47b0-af92-07183b1e334d",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.579.0>,
  params: %{},
  path_info: ["technologies", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "7af60321-370e-47b0-af92-07183b1e334d"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/technologies/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXitWVgtnpMAAATi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Technology<>, valid?: true>,
    layout: {FlowWeb.LayoutView, "app.html"},
    technology: %Flow.Jobs.Technology{
      __meta__: #Ecto.Schema.Metadata<:loaded, "technologies">,
      description: "some description",
      id: "f91a0e88-0d50-4835-b635-6c9c109aa4ae",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "52c26e74-f6f0-4071-9978-329119357cd6",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.581.0>,
  params: %{"id" => "f91a0e88-0d50-4835-b635-6c9c109aa4ae"},
  path_info: ["technologies", "f91a0e88-0d50-4835-b635-6c9c109aa4ae", "edit"],
  path_params: %{"id" => "f91a0e88-0d50-4835-b635-6c9c109aa4ae"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.TechnologyController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.TechnologyView,
    :plug_session => %{"user_id" => "52c26e74-f6f0-4071-9978-329119357cd6"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/technologies/f91a0e88-0d50-4835-b635-6c9c109aa4ae/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXlGbNh3344AAAUC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "c91c661e-ea2d-4556-a7b3-2646b9b35c8e",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.585.0>,
  params: %{},
  path_info: ["status"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "c91c661e-ea2d-4556-a7b3-2646b9b35c8e"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/status",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXn1s_BuSzgAAAUi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    status: %Flow.Jobs.Status{
      __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
      candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
      description: "some updated description",
      enable: false,
      id: "be80c149-bb42-4a54-bbd8-68edd8f91447",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some updated name",
      order: 43,
      updated_at: ~N[2020-04-11 16:04:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "0d8752a9-b6b0-4f5a-9499-815e2f1b2d57",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDBkODc1MmE5LWI2YjAtNGY1YS05NDk5LTgxNWUyZjFiMmQ1Nw.AzKdqtUEisXeIo_Fgp9XtNwYYgGnuG5R1-5lnjPCR9w"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.587.0>,
  params: %{"id" => "be80c149-bb42-4a54-bbd8-68edd8f91447"},
  path_info: ["status", "be80c149-bb42-4a54-bbd8-68edd8f91447"],
  path_params: %{"id" => "be80c149-bb42-4a54-bbd8-68edd8f91447"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Status updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Status updated successfully."},
      "user_id" => "0d8752a9-b6b0-4f5a-9499-815e2f1b2d57"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDBkODc1MmE5LWI2YjAtNGY1YS05NDk5LTgxNWUyZjFiMmQ1Nw.AzKdqtUEisXeIo_Fgp9XtNwYYgGnuG5R1-5lnjPCR9w"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDBkODc1MmE5LWI2YjAtNGY1YS05NDk5LTgxNWUyZjFiMmQ1Nw.AzKdqtUEisXeIo_Fgp9XtNwYYgGnuG5R1-5lnjPCR9w"}
  ],
  request_path: "/status/be80c149-bb42-4a54-bbd8-68edd8f91447",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXs3xSgPbroAAAVi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        order: {"can't be blank", [validation: :required]},
        enable: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Status<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    status: %Flow.Jobs.Status{
      __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
      candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
      description: "some description",
      enable: true,
      id: "072a6e17-c53d-4349-b6b2-96d9f3b84050",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      order: 42,
      updated_at: ~N[2020-04-11 16:04:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "17437777-1f3e-4401-a2ef-2abd6d80f8ab",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "status" => %{
      "description" => nil,
      "enable" => nil,
      "name" => nil,
      "order" => nil
    }
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.589.0>,
  params: %{
    "id" => "072a6e17-c53d-4349-b6b2-96d9f3b84050",
    "status" => %{
      "description" => nil,
      "enable" => nil,
      "name" => nil,
      "order" => nil
    }
  },
  path_info: ["status", "072a6e17-c53d-4349-b6b2-96d9f3b84050"],
  path_params: %{"id" => "072a6e17-c53d-4349-b6b2-96d9f3b84050"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "17437777-1f3e-4401-a2ef-2abd6d80f8ab"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/status/072a6e17-c53d-4349-b6b2-96d9f3b84050",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXwDoKhrw7kAAAaB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    layout: {FlowWeb.LayoutView, "app.html"},
    status: %Flow.Jobs.Status{
      __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
      candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
      description: "some description",
      enable: true,
      id: "6648b226-9815-435e-9288-5a5b3dfa4187",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      order: 42,
      updated_at: ~N[2020-04-11 16:04:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "0448ead8-f373-4130-b8e0-201a81a9676f",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDA0NDhlYWQ4LWYzNzMtNDEzMC1iOGUwLTIwMWE4MWE5Njc2Zg.495bKu7lvnKCcRHE_bI5hvjVJyjC05DLZNCIzcrSxls"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.591.0>,
  params: %{"id" => "6648b226-9815-435e-9288-5a5b3dfa4187"},
  path_info: ["status", "6648b226-9815-435e-9288-5a5b3dfa4187"],
  path_params: %{"id" => "6648b226-9815-435e-9288-5a5b3dfa4187"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Status created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Status created successfully."},
      "user_id" => "0448ead8-f373-4130-b8e0-201a81a9676f"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDA0NDhlYWQ4LWYzNzMtNDEzMC1iOGUwLTIwMWE4MWE5Njc2Zg.495bKu7lvnKCcRHE_bI5hvjVJyjC05DLZNCIzcrSxls"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHFN0YXR1cyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDA0NDhlYWQ4LWYzNzMtNDEzMC1iOGUwLTIwMWE4MWE5Njc2Zg.495bKu7lvnKCcRHE_bI5hvjVJyjC05DLZNCIzcrSxls"}
  ],
  request_path: "/status/6648b226-9815-435e-9288-5a5b3dfa4187",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdXy1myg5CscAAAWi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
..%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        order: {"can't be blank", [validation: :required]},
        enable: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Status<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "0a17d934-cd15-444c-a374-1cb65b249341",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "status" => %{
      "description" => nil,
      "enable" => nil,
      "name" => nil,
      "order" => nil
    }
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.595.0>,
  params: %{
    "status" => %{
      "description" => nil,
      "enable" => nil,
      "name" => nil,
      "order" => nil
    }
  },
  path_info: ["status"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "0a17d934-cd15-444c-a374-1cb65b249341"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/status",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdX4ok-jbVZsAAAbh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        order: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Status<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "06514ea7-0348-41e9-a570-b2c03a11bdf6",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.597.0>,
  params: %{},
  path_info: ["status", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "06514ea7-0348-41e9-a570-b2c03a11bdf6"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/status/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdX6F5ojJwpIAAAcB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Status<>, valid?: true>,
    layout: {FlowWeb.LayoutView, "app.html"},
    status: %Flow.Jobs.Status{
      __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
      candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
      description: "some description",
      enable: true,
      id: "e364c5ff-9258-41b0-82fa-6bff8d35dfef",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      order: 42,
      updated_at: ~N[2020-04-11 16:04:32]
    },
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "bd42a7ca-ba3f-4c38-b5b7-876268046800",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.599.0>,
  params: %{"id" => "e364c5ff-9258-41b0-82fa-6bff8d35dfef"},
  path_info: ["status", "e364c5ff-9258-41b0-82fa-6bff8d35dfef", "edit"],
  path_params: %{"id" => "e364c5ff-9258-41b0-82fa-6bff8d35dfef"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.StatusController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.StatusView,
    :plug_session => %{"user_id" => "bd42a7ca-ba3f-4c38-b5b7-876268046800"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/status/e364c5ff-9258-41b0-82fa-6bff8d35dfef/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdX79ZGAGm5UAAAch"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.[]
%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    jobs: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "f6414dd8-88cd-4694-b87c-71b87c53a9c4",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.603.0>,
  params: %{},
  path_info: [],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "f6414dd8-88cd-4694-b87c-71b87c53a9c4"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdX-Jd8AfBX4AAAXC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    job: %Flow.Jobs.Job{
      __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
      cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
      client: %Flow.Jobs.Client{
        __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
        description: "some description",
        id: "f4e1a0ce-8702-4f55-8289-20c943020f41",
        inserted_at: ~N[2020-04-11 16:04:32],
        jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
        logo: "some logo",
        name: "some name",
        updated_at: ~N[2020-04-11 16:04:32]
      },
      client_id: "f4e1a0ce-8702-4f55-8289-20c943020f41",
      description: "some updated description",
      id: "035e6a22-a17c-4d0b-9791-98f077635e60",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some updated name",
      positions: 43,
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "0425242b-7c63-4c43-bb18-49adf7ae56e3",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDA0MjUyNDJiLTdjNjMtNGM0My1iYjE4LTQ5YWRmN2FlNTZlMw.zeJQ2zRgVJiMKMmnuCyGvBdgOqWtuMpLZBe6rruJBjI"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.605.0>,
  params: %{"id" => "035e6a22-a17c-4d0b-9791-98f077635e60"},
  path_info: ["jobs", "035e6a22-a17c-4d0b-9791-98f077635e60"],
  path_params: %{"id" => "035e6a22-a17c-4d0b-9791-98f077635e60"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Job updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Job updated successfully."},
      "user_id" => "0425242b-7c63-4c43-bb18-49adf7ae56e3"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDA0MjUyNDJiLTdjNjMtNGM0My1iYjE4LTQ5YWRmN2FlNTZlMw.zeJQ2zRgVJiMKMmnuCyGvBdgOqWtuMpLZBe6rruJBjI"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDA0MjUyNDJiLTdjNjMtNGM0My1iYjE4LTQ5YWRmN2FlNTZlMw.zeJQ2zRgVJiMKMmnuCyGvBdgOqWtuMpLZBe6rruJBjI"}
  ],
  request_path: "/jobs/035e6a22-a17c-4d0b-9791-98f077635e60",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdYDrPii3gVcAAAYC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        positions: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Job<>,
      valid?: false
    >,
    clients: [{"some name", "07b11ea9-5086-492b-8ba4-cf71b7285dff"}],
    job: %Flow.Jobs.Job{
      __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
      cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
      client: %Flow.Jobs.Client{
        __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
        description: "some description",
        id: "07b11ea9-5086-492b-8ba4-cf71b7285dff",
        inserted_at: ~N[2020-04-11 16:04:32],
        jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
        logo: "some logo",
        name: "some name",
        updated_at: ~N[2020-04-11 16:04:32]
      },
      client_id: "07b11ea9-5086-492b-8ba4-cf71b7285dff",
      description: "some description",
      id: "26ea8520-7ed5-47c0-afec-a8be397181e1",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      positions: 42,
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "5e7a2c18-3cce-4617-af4f-50f258f440f0",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "job" => %{"description" => nil, "name" => nil, "positions" => nil}
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.607.0>,
  params: %{
    "id" => "26ea8520-7ed5-47c0-afec-a8be397181e1",
    "job" => %{"description" => nil, "name" => nil, "positions" => nil}
  },
  path_info: ["jobs", "26ea8520-7ed5-47c0-afec-a8be397181e1"],
  path_params: %{"id" => "26ea8520-7ed5-47c0-afec-a8be397181e1"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "5e7a2c18-3cce-4617-af4f-50f258f440f0"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/jobs/26ea8520-7ed5-47c0-afec-a8be397181e1",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdYGmxfh72JUAAAdB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    job: %Flow.Jobs.Job{
      __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
      cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
      client: %Flow.Jobs.Client{
        __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
        description: "some description",
        id: "4d222bce-2114-4067-a018-ee318bbe43b4",
        inserted_at: ~N[2020-04-11 16:04:32],
        jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
        logo: "some logo",
        name: "some name",
        updated_at: ~N[2020-04-11 16:04:32]
      },
      client_id: "4d222bce-2114-4067-a018-ee318bbe43b4",
      description: "some description",
      id: "40ccec72-10a7-4a53-b43b-2e1f85ede37f",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      positions: 42,
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "ee25ac26-0211-42c8-bb6b-aea875bd1358",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGVlMjVhYzI2LTAyMTEtNDJjOC1iYjZiLWFlYTg3NWJkMTM1OA.ko_ld06fyo895cpDUG81Th-4zacXi3JMsb12vtMAWaQ"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.609.0>,
  params: %{"id" => "40ccec72-10a7-4a53-b43b-2e1f85ede37f"},
  path_info: ["jobs", "40ccec72-10a7-4a53-b43b-2e1f85ede37f"],
  path_params: %{"id" => "40ccec72-10a7-4a53-b43b-2e1f85ede37f"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Job created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Job created successfully."},
      "user_id" => "ee25ac26-0211-42c8-bb6b-aea875bd1358"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGVlMjVhYzI2LTAyMTEtNDJjOC1iYjZiLWFlYTg3NWJkMTM1OA.ko_ld06fyo895cpDUG81Th-4zacXi3JMsb12vtMAWaQ"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAGUpvYiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJGVlMjVhYzI2LTAyMTEtNDJjOC1iYjZiLWFlYTg3NWJkMTM1OA.ko_ld06fyo895cpDUG81Th-4zacXi3JMsb12vtMAWaQ"}
  ],
  request_path: "/jobs/40ccec72-10a7-4a53-b43b-2e1f85ede37f",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdYLMdZAQ7D8AAAZC"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
..%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        positions: {"can't be blank", [validation: :required]},
        client_id: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Job<>,
      valid?: false
    >,
    clients: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "7b8da49f-5b04-478c-8262-9f02445ab6a3",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "job" => %{"description" => nil, "name" => nil, "positions" => nil}
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.613.0>,
  params: %{"job" => %{"description" => nil, "name" => nil, "positions" => nil}},
  path_info: ["jobs"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "7b8da49f-5b04-478c-8262-9f02445ab6a3"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/jobs",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdYTPdWj8SJAAAAZi"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        positions: {"can't be blank", [validation: :required]},
        client_id: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Job<>,
      valid?: false
    >,
    clients: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "ed188e7a-c567-490c-bdad-02595cec9fbd",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.615.0>,
  params: %{},
  path_info: ["jobs", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "ed188e7a-c567-490c-bdad-02595cec9fbd"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/jobs/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdYVPwSjJ8MUAAAeh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Job<>, valid?: true>,
    clients: [{"some name", "ed66e34e-261e-4395-9fee-d94b2ed0f242"}],
    job: %Flow.Jobs.Job{
      __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
      cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
      client: %Flow.Jobs.Client{
        __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
        description: "some description",
        id: "ed66e34e-261e-4395-9fee-d94b2ed0f242",
        inserted_at: ~N[2020-04-11 16:04:32],
        jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
        logo: "some logo",
        name: "some name",
        updated_at: ~N[2020-04-11 16:04:32]
      },
      client_id: "ed66e34e-261e-4395-9fee-d94b2ed0f242",
      description: "some description",
      id: "6355f5d0-bea6-4939-af91-379ea959b5d6",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      positions: 42,
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "42531b77-45e1-4ed8-9c6b-eb5ceaf9bab2",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.617.0>,
  params: %{"id" => "6355f5d0-bea6-4939-af91-379ea959b5d6"},
  path_info: ["jobs", "6355f5d0-bea6-4939-af91-379ea959b5d6", "edit"],
  path_params: %{"id" => "6355f5d0-bea6-4939-af91-379ea959b5d6"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.JobController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.JobView,
    :plug_session => %{"user_id" => "42531b77-45e1-4ed8-9c6b-eb5ceaf9bab2"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/jobs/6355f5d0-bea6-4939-af91-379ea959b5d6/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdYYmpOAKOXkAAAfB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.................%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidates: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "dfb9335d-5845-4148-bf60-3d33dd5ed25b",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.655.0>,
  params: %{},
  path_info: ["candidates"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "dfb9335d-5845-4148-bf60-3d33dd5ed25b"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/candidates",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdYzQMfj-qaMAAAhB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidate: %Flow.Jobs.Candidate{
      __meta__: #Ecto.Schema.Metadata<:loaded, "candidates">,
      email: "some updated email",
      github: "some updated github",
      id: "8cea0a98-0b12-45db-a0a0-6c5affea0b38",
      inserted_at: ~N[2020-04-11 16:04:32],
      job: %Flow.Jobs.Job{
        __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
        cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
        client: %Flow.Jobs.Client{
          __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
          description: "some description",
          id: "61c249f5-f79e-43e2-a096-5886d361b25b",
          inserted_at: ~N[2020-04-11 16:04:32],
          jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
          logo: "some logo",
          name: "some name",
          updated_at: ~N[2020-04-11 16:04:32]
        },
        client_id: "61c249f5-f79e-43e2-a096-5886d361b25b",
        description: "some description",
        id: "3ed6a273-02b8-40a8-990d-33f43520a919",
        inserted_at: ~N[2020-04-11 16:04:32],
        name: "some name",
        positions: 42,
        updated_at: ~N[2020-04-11 16:04:32]
      },
      job_id: "3ed6a273-02b8-40a8-990d-33f43520a919",
      linkedin: "some updated linkedin",
      name: "some updated name",
      phone: "some updated phone",
      status: %Flow.Jobs.Status{
        __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
        candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
        description: "some description",
        enable: true,
        id: "4fde2d98-0df7-414c-93b1-5286186ef0af",
        inserted_at: ~N[2020-04-11 16:04:32],
        name: "some name",
        order: 42,
        updated_at: ~N[2020-04-11 16:04:32]
      },
      status_id: "4fde2d98-0df7-414c-93b1-5286186ef0af",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "9155154d-7e87-4201-9793-618dd3883c71",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDkxNTUxNTRkLTdlODctNDIwMS05NzkzLTYxOGRkMzg4M2M3MQ.WMoxYsskxc-vzl0O1m99pAXdsP3C0FeuIHS2Wl67lV4"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.657.0>,
  params: %{"id" => "8cea0a98-0b12-45db-a0a0-6c5affea0b38"},
  path_info: ["candidates", "8cea0a98-0b12-45db-a0a0-6c5affea0b38"],
  path_params: %{"id" => "8cea0a98-0b12-45db-a0a0-6c5affea0b38"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Candidate updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Candidate updated successfully."},
      "user_id" => "9155154d-7e87-4201-9793-618dd3883c71"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDkxNTUxNTRkLTdlODctNDIwMS05NzkzLTYxOGRkMzg4M2M3MQ.WMoxYsskxc-vzl0O1m99pAXdsP3C0FeuIHS2Wl67lV4"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDkxNTUxNTRkLTdlODctNDIwMS05NzkzLTYxOGRkMzg4M2M3MQ.WMoxYsskxc-vzl0O1m99pAXdsP3C0FeuIHS2Wl67lV4"}
  ],
  request_path: "/candidates/8cea0a98-0b12-45db-a0a0-6c5affea0b38",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdY8hGyDM5HcAAAiB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidate: %Flow.Jobs.Candidate{
      __meta__: #Ecto.Schema.Metadata<:loaded, "candidates">,
      email: "some email",
      github: "some github",
      id: "59e80785-ee7b-46ee-81d3-6d2472a90cf1",
      inserted_at: ~N[2020-04-11 16:04:32],
      job: %Flow.Jobs.Job{
        __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
        cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
        client: %Flow.Jobs.Client{
          __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
          description: "some description",
          id: "29177201-8932-4643-acfb-4154f2d692bf",
          inserted_at: ~N[2020-04-11 16:04:32],
          jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
          logo: "some logo",
          name: "some name",
          updated_at: ~N[2020-04-11 16:04:32]
        },
        client_id: "29177201-8932-4643-acfb-4154f2d692bf",
        description: "some description",
        id: "2e987254-3740-44ed-adb2-8fd4aca50a65",
        inserted_at: ~N[2020-04-11 16:04:32],
        name: "some name",
        positions: 42,
        updated_at: ~N[2020-04-11 16:04:32]
      },
      job_id: "2e987254-3740-44ed-adb2-8fd4aca50a65",
      linkedin: "some linkedin",
      name: "some name",
      phone: "some phone",
      status: %Flow.Jobs.Status{
        __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
        candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
        description: "some description",
        enable: true,
        id: "d0d24b4a-7ada-4539-bca9-f90e7275f168",
        inserted_at: ~N[2020-04-11 16:04:32],
        name: "some name",
        order: 42,
        updated_at: ~N[2020-04-11 16:04:32]
      },
      status_id: "d0d24b4a-7ada-4539-bca9-f90e7275f168",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        email: {"can't be blank", [validation: :required]},
        phone: {"can't be blank", [validation: :required]},
        linkedin: {"can't be blank", [validation: :required]},
        github: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Candidate<>,
      valid?: false
    >,
    jobs: [{"some name", "2e987254-3740-44ed-adb2-8fd4aca50a65"}],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [{"some name", "d0d24b4a-7ada-4539-bca9-f90e7275f168"}],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "92efce34-f5df-4d64-be2e-7c7175b13637",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "candidate" => %{
      "email" => nil,
      "github" => nil,
      "linkedin" => nil,
      "name" => nil,
      "phone" => nil
    }
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.659.0>,
  params: %{
    "candidate" => %{
      "email" => nil,
      "github" => nil,
      "linkedin" => nil,
      "name" => nil,
      "phone" => nil
    },
    "id" => "59e80785-ee7b-46ee-81d3-6d2472a90cf1"
  },
  path_info: ["candidates", "59e80785-ee7b-46ee-81d3-6d2472a90cf1"],
  path_params: %{"id" => "59e80785-ee7b-46ee-81d3-6d2472a90cf1"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "92efce34-f5df-4d64-be2e-7c7175b13637"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/candidates/59e80785-ee7b-46ee-81d3-6d2472a90cf1",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZBGcOAqlpgAAAih"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidate: %Flow.Jobs.Candidate{
      __meta__: #Ecto.Schema.Metadata<:loaded, "candidates">,
      email: "some email",
      github: "some github",
      id: "246ca56a-6ab6-4a65-bc8d-294ac07e092e",
      inserted_at: ~N[2020-04-11 16:04:32],
      job: %Flow.Jobs.Job{
        __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
        cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
        client: %Flow.Jobs.Client{
          __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
          description: "some description",
          id: "9ccaa33e-1f1b-4263-9378-dc671007cab4",
          inserted_at: ~N[2020-04-11 16:04:32],
          jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
          logo: "some logo",
          name: "some name",
          updated_at: ~N[2020-04-11 16:04:32]
        },
        client_id: "9ccaa33e-1f1b-4263-9378-dc671007cab4",
        description: "some description",
        id: "ec0a830b-c2c2-4a9f-8688-db436474cf9a",
        inserted_at: ~N[2020-04-11 16:04:32],
        name: "some name",
        positions: 42,
        updated_at: ~N[2020-04-11 16:04:32]
      },
      job_id: "ec0a830b-c2c2-4a9f-8688-db436474cf9a",
      linkedin: "some linkedin",
      name: "some name",
      phone: "some phone",
      status: %Flow.Jobs.Status{
        __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
        candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
        description: "some description",
        enable: true,
        id: "895dde82-b2e1-4167-8c75-e2628b8e0847",
        inserted_at: ~N[2020-04-11 16:04:32],
        name: "some name",
        order: 42,
        updated_at: ~N[2020-04-11 16:04:32]
      },
      status_id: "895dde82-b2e1-4167-8c75-e2628b8e0847",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "483d0d98-f2d6-4962-88d0-2f4e598d81a3",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDQ4M2QwZDk4LWYyZDYtNDk2Mi04OGQwLTJmNGU1OThkODFhMw.MIcgzTuP9MnJsXeer0cM5cH7DrP1QQgzCuPJEWminc8"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.661.0>,
  params: %{"id" => "246ca56a-6ab6-4a65-bc8d-294ac07e092e"},
  path_info: ["candidates", "246ca56a-6ab6-4a65-bc8d-294ac07e092e"],
  path_params: %{"id" => "246ca56a-6ab6-4a65-bc8d-294ac07e092e"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Candidate created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Candidate created successfully."},
      "user_id" => "483d0d98-f2d6-4962-88d0-2f4e598d81a3"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDQ4M2QwZDk4LWYyZDYtNDk2Mi04OGQwLTJmNGU1OThkODFhMw.MIcgzTuP9MnJsXeer0cM5cH7DrP1QQgzCuPJEWminc8"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAH0NhbmRpZGF0ZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDQ4M2QwZDk4LWYyZDYtNDk2Mi04OGQwLTJmNGU1OThkODFhMw.MIcgzTuP9MnJsXeer0cM5cH7DrP1QQgzCuPJEWminc8"}
  ],
  request_path: "/candidates/246ca56a-6ab6-4a65-bc8d-294ac07e092e",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZI8DvCPGq4AAAjh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
..%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        email: {"can't be blank", [validation: :required]},
        phone: {"can't be blank", [validation: :required]},
        linkedin: {"can't be blank", [validation: :required]},
        github: {"can't be blank", [validation: :required]},
        status_id: {"can't be blank", [validation: :required]},
        job_id: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Candidate<>,
      valid?: false
    >,
    jobs: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "e6e55ea0-e833-4ed1-9ce0-a7434e966c8f",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "candidate" => %{
      "email" => nil,
      "github" => nil,
      "linkedin" => nil,
      "name" => nil,
      "phone" => nil
    }
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.665.0>,
  params: %{
    "candidate" => %{
      "email" => nil,
      "github" => nil,
      "linkedin" => nil,
      "name" => nil,
      "phone" => nil
    }
  },
  path_info: ["candidates"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "e6e55ea0-e833-4ed1-9ce0-a7434e966c8f"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/candidates",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZRHhsB04wAAAAlB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        email: {"can't be blank", [validation: :required]},
        phone: {"can't be blank", [validation: :required]},
        linkedin: {"can't be blank", [validation: :required]},
        github: {"can't be blank", [validation: :required]},
        status_id: {"can't be blank", [validation: :required]},
        job_id: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Candidate<>,
      valid?: false
    >,
    jobs: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "1d83df3c-5dda-4dd7-a962-fc31b70b91d1",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.667.0>,
  params: %{},
  path_info: ["candidates", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "1d83df3c-5dda-4dd7-a962-fc31b70b91d1"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/candidates/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZUUjwj6w48AAAlh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    candidate: %Flow.Jobs.Candidate{
      __meta__: #Ecto.Schema.Metadata<:loaded, "candidates">,
      email: "some email",
      github: "some github",
      id: "0caad1f2-e56d-45b7-b19a-07478d5a9a0d",
      inserted_at: ~N[2020-04-11 16:04:32],
      job: %Flow.Jobs.Job{
        __meta__: #Ecto.Schema.Metadata<:loaded, "jobs">,
        cadidates: #Ecto.Association.NotLoaded<association :cadidates is not loaded>,
        client: %Flow.Jobs.Client{
          __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
          description: "some description",
          id: "4fc536e4-572e-4348-b59a-5bfbe8583f34",
          inserted_at: ~N[2020-04-11 16:04:32],
          jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
          logo: "some logo",
          name: "some name",
          updated_at: ~N[2020-04-11 16:04:32]
        },
        client_id: "4fc536e4-572e-4348-b59a-5bfbe8583f34",
        description: "some description",
        id: "64b44ee8-06b8-44e4-a5f0-4d930dd4e206",
        inserted_at: ~N[2020-04-11 16:04:32],
        name: "some name",
        positions: 42,
        updated_at: ~N[2020-04-11 16:04:32]
      },
      job_id: "64b44ee8-06b8-44e4-a5f0-4d930dd4e206",
      linkedin: "some linkedin",
      name: "some name",
      phone: "some phone",
      status: %Flow.Jobs.Status{
        __meta__: #Ecto.Schema.Metadata<:loaded, "status">,
        candidates: #Ecto.Association.NotLoaded<association :candidates is not loaded>,
        description: "some description",
        enable: true,
        id: "ce5e5b54-12be-4d13-a0ff-f130e7e74b9c",
        inserted_at: ~N[2020-04-11 16:04:32],
        name: "some name",
        order: 42,
        updated_at: ~N[2020-04-11 16:04:32]
      },
      status_id: "ce5e5b54-12be-4d13-a0ff-f130e7e74b9c",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Candidate<>, valid?: true>,
    jobs: [{"some name", "64b44ee8-06b8-44e4-a5f0-4d930dd4e206"}],
    layout: {FlowWeb.LayoutView, "app.html"},
    status: [{"some name", "ce5e5b54-12be-4d13-a0ff-f130e7e74b9c"}],
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "4c315624-489d-49d7-b78d-e9d19aa1e0e7",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.669.0>,
  params: %{"id" => "0caad1f2-e56d-45b7-b19a-07478d5a9a0d"},
  path_info: ["candidates", "0caad1f2-e56d-45b7-b19a-07478d5a9a0d", "edit"],
  path_params: %{"id" => "0caad1f2-e56d-45b7-b19a-07478d5a9a0d"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.CandidateController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.CandidateView,
    :plug_session => %{"user_id" => "4c315624-489d-49d7-b78d-e9d19aa1e0e7"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/candidates/0caad1f2-e56d-45b7-b19a-07478d5a9a0d/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZY8cSB6H3UAAAmB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    clients: [],
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "87e4ac6d-26da-42b8-85f5-a981dc3eab6c",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.673.0>,
  params: %{},
  path_info: ["clients"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :index,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "index.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "87e4ac6d-26da-42b8-85f5-a981dc3eab6c"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/clients",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZdnKciY1xAAAAmh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    client: %Flow.Jobs.Client{
      __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
      description: "some updated description",
      id: "d4e9164b-05ff-4c5c-bfe5-f984249559e6",
      inserted_at: ~N[2020-04-11 16:04:32],
      jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
      logo: "some updated logo",
      name: "some updated name",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "8245a9e7-e9c2-40c1-8be2-3fb6ff6b3494",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDgyNDVhOWU3LWU5YzItNDBjMS04YmUyLTNmYjZmZjZiMzQ5NA.ZcaDaISAAgJ5xSNjksZWXoo91pEVxOiXcQILp1WT924"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.675.0>,
  params: %{"id" => "d4e9164b-05ff-4c5c-bfe5-f984249559e6"},
  path_info: ["clients", "d4e9164b-05ff-4c5c-bfe5-f984249559e6"],
  path_params: %{"id" => "d4e9164b-05ff-4c5c-bfe5-f984249559e6"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Client updated successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Client updated successfully."},
      "user_id" => "8245a9e7-e9c2-40c1-8be2-3fb6ff6b3494"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDgyNDVhOWU3LWU5YzItNDBjMS04YmUyLTNmYjZmZjZiMzQ5NA.ZcaDaISAAgJ5xSNjksZWXoo91pEVxOiXcQILp1WT924"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDgyNDVhOWU3LWU5YzItNDBjMS04YmUyLTNmYjZmZjZiMzQ5NA.ZcaDaISAAgJ5xSNjksZWXoo91pEVxOiXcQILp1WT924"}
  ],
  request_path: "/clients/d4e9164b-05ff-4c5c-bfe5-f984249559e6",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZhjJZjYCqYAAAnh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :update,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        logo: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Client<>,
      valid?: false
    >,
    client: %Flow.Jobs.Client{
      __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
      description: "some description",
      id: "f13b3aaf-06f3-48ae-8b43-1eb999aa9f05",
      inserted_at: ~N[2020-04-11 16:04:32],
      jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
      logo: "some logo",
      name: "some name",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "17d2a845-8dcb-48ec-8318-04f9874f1889",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "client" => %{"description" => nil, "logo" => nil, "name" => nil}
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "PUT",
  owner: #PID<0.677.0>,
  params: %{
    "client" => %{"description" => nil, "logo" => nil, "name" => nil},
    "id" => "f13b3aaf-06f3-48ae-8b43-1eb999aa9f05"
  },
  path_info: ["clients", "f13b3aaf-06f3-48ae-8b43-1eb999aa9f05"],
  path_params: %{"id" => "f13b3aaf-06f3-48ae-8b43-1eb999aa9f05"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :update,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "17d2a845-8dcb-48ec-8318-04f9874f1889"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/clients/f13b3aaf-06f3-48ae-8b43-1eb999aa9f05",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZkMnGg0w4IAAAoB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    client: %Flow.Jobs.Client{
      __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
      description: "some description",
      id: "9b1a03c9-5d4d-44e6-8fbe-841f46481f4a",
      inserted_at: ~N[2020-04-11 16:04:32],
      jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
      logo: "some logo",
      name: "some name",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "38fc7fa8-6584-4b49-9188-f4a9fbc19761",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDM4ZmM3ZmE4LTY1ODQtNGI0OS05MTg4LWY0YTlmYmMxOTc2MQ.GGZKownF3xmPofPSZxRG-oX70nStxUytbGfaVRWutZ8"
  },
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.679.0>,
  params: %{"id" => "9b1a03c9-5d4d-44e6-8fbe-841f46481f4a"},
  path_info: ["clients", "9b1a03c9-5d4d-44e6-8fbe-841f46481f4a"],
  path_params: %{"id" => "9b1a03c9-5d4d-44e6-8fbe-841f46481f4a"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :show,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{"info" => "Client created successfully."},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "show.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{
      "phoenix_flash" => %{"info" => "Client created successfully."},
      "user_id" => "38fc7fa8-6584-4b49-9188-f4a9fbc19761"
    },
    :plug_session_fetch => :done,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{
    "_flow_key" => "SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDM4ZmM3ZmE4LTY1ODQtNGI0OS05MTg4LWY0YTlmYmMxOTc2MQ.GGZKownF3xmPofPSZxRG-oX70nStxUytbGfaVRWutZ8"
  },
  req_headers: [
    {"cookie",
     "_flow_key=SFMyNTY.g3QAAAACbQAAAA1waG9lbml4X2ZsYXNodAAAAAFtAAAABGluZm9tAAAAHENsaWVudCBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5tAAAAB3VzZXJfaWRtAAAAJDM4ZmM3ZmE4LTY1ODQtNGI0OS05MTg4LWY0YTlmYmMxOTc2MQ.GGZKownF3xmPofPSZxRG-oX70nStxUytbGfaVRWutZ8"}
  ],
  request_path: "/clients/9b1a03c9-5d4d-44e6-8fbe-841f46481f4a",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZnS0phs8wkAAApB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
..%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: :insert,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        logo: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Client<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "a79db103-a68e-4afa-bb2d-ae8d08ee643a",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{
    "client" => %{"description" => nil, "logo" => nil, "name" => nil}
  },
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "POST",
  owner: #PID<0.683.0>,
  params: %{"client" => %{"description" => nil, "logo" => nil, "name" => nil}},
  path_info: ["clients"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :create,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "a79db103-a68e-4afa-bb2d-ae8d08ee643a"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [{"content-type", "multipart/mixed; boundary=plug_conn_test"}],
  request_path: "/clients",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZtDnMCBkLkAAAqh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<
      action: nil,
      changes: %{},
      errors: [
        name: {"can't be blank", [validation: :required]},
        description: {"can't be blank", [validation: :required]},
        logo: {"can't be blank", [validation: :required]}
      ],
      data: #Flow.Jobs.Client<>,
      valid?: false
    >,
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "49b05d7c-57f0-46c5-b750-0d3b9d91ac30",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.685.0>,
  params: %{},
  path_info: ["clients", "new"],
  path_params: %{},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :new,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "new.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "49b05d7c-57f0-46c5-b750-0d3b9d91ac30"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/clients/new",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZusGsBzB0wAAArB"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.%Plug.Conn{
  adapter: {Plug.Adapters.Test.Conn, :...},
  assigns: %{
    changeset: #Ecto.Changeset<action: nil, changes: %{}, errors: [],
     data: #Flow.Jobs.Client<>, valid?: true>,
    client: %Flow.Jobs.Client{
      __meta__: #Ecto.Schema.Metadata<:loaded, "clients">,
      description: "some description",
      id: "0338cf4c-0e1b-493b-877d-9d943adf6e0c",
      inserted_at: ~N[2020-04-11 16:04:32],
      jobs: #Ecto.Association.NotLoaded<association :jobs is not loaded>,
      logo: "some logo",
      name: "some name",
      updated_at: ~N[2020-04-11 16:04:32]
    },
    layout: {FlowWeb.LayoutView, "app.html"},
    user: %Flow.Account.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      admin: true,
      avatar: "some avatar",
      email: "some email",
      id: "bb2da163-23ae-4a99-b9a8-211feddc2fe1",
      inserted_at: ~N[2020-04-11 16:04:32],
      name: "some name",
      token: "some token",
      updated_at: ~N[2020-04-11 16:04:32]
    }
  },
  before_send: [#Function<0.88865919/1 in Plug.CSRFProtection.call/2>,
   #Function<2.35138165/1 in Phoenix.Controller.fetch_flash/2>,
   #Function<0.32542428/1 in Plug.Session.before_send/2>,
   #Function<0.24098476/1 in Plug.Telemetry.call/2>],
  body_params: %{},
  cookies: %{},
  halted: false,
  host: "www.example.com",
  method: "GET",
  owner: #PID<0.687.0>,
  params: %{"id" => "0338cf4c-0e1b-493b-877d-9d943adf6e0c"},
  path_info: ["clients", "0338cf4c-0e1b-493b-877d-9d943adf6e0c", "edit"],
  path_params: %{"id" => "0338cf4c-0e1b-493b-877d-9d943adf6e0c"},
  port: 80,
  private: %{
    FlowWeb.Router => {[], %{}},
    :phoenix_action => :edit,
    :phoenix_controller => FlowWeb.ClientController,
    :phoenix_endpoint => FlowWeb.Endpoint,
    :phoenix_flash => %{},
    :phoenix_format => "html",
    :phoenix_layout => {FlowWeb.LayoutView, :app},
    :phoenix_recycled => true,
    :phoenix_router => FlowWeb.Router,
    :phoenix_template => "edit.html",
    :phoenix_view => FlowWeb.ClientView,
    :plug_session => %{"user_id" => "bb2da163-23ae-4a99-b9a8-211feddc2fe1"},
    :plug_session_fetch => :done,
    :plug_session_info => :write,
    :plug_skip_csrf_protection => true
  },
  query_params: %{},
  query_string: "",
  remote_ip: {127, 0, 0, 1},
  req_cookies: %{},
  req_headers: [],
  request_path: "/clients/0338cf4c-0e1b-493b-877d-9d943adf6e0c/edit",
  resp_body: nil,
  resp_cookies: %{},
  resp_headers: [
    {"cache-control", "max-age=0, private, must-revalidate"},
    {"x-request-id", "FgTPdZwnbRDPgWkAAArh"},
    {"x-frame-options", "SAMEORIGIN"},
    {"x-xss-protection", "1; mode=block"},
    {"x-content-type-options", "nosniff"},
    {"x-download-options", "noopen"},
    {"x-permitted-cross-domain-policies", "none"},
    {"cross-origin-window-policy", "deny"}
  ],
  scheme: :http,
  script_name: [],
  secret_key_base: :...,
  state: :unset,
  status: nil
}
.

Finished in 2.1 seconds
105 tests, 0 failures

Randomized with seed 583197
